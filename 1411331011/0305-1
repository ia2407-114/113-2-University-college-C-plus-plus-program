#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// 定義學生結構
struct Student {
    int ID;                  // 學號
    char name[50];           // 姓名
    float score;             // 成績
    struct Student* nextPtr; // 指向下一個節點的指標
};

typedef struct Student Student;
typedef Student* StudentPtr;

// 函式原型
void insert(StudentPtr* sPtr, int ID, const char name[], float score);
int isEmpty(StudentPtr sPtr);
void printList(StudentPtr currentPtr);
void freeList(StudentPtr* sPtr);
void instructions(void);

int main(void) {
    StudentPtr startPtr = NULL; // 初始化為空的鏈結串列
    int ID;
    char name[50];
    float score;

    instructions(); // 顯示說明

    // 允許使用者輸入 4 筆學生資料
    for (int i = 0; i < 4; i++) {
        printf("請輸入學生資料 (學號 姓名 成績): ");
        if (scanf_s("%d %49s %f", &ID, name, &score) != 3) {
            printf("輸入格式錯誤，請重新執行程式。\n");
            return 1;
        }
        insert(&startPtr, ID, name, score); // 插入鏈結串列
    }

    // 印出鏈結串列內容
    printList(startPtr);

    freeList(&startPtr);

    puts("程式執行完畢。");
    return 0;
}

void instructions(void) {
    puts("請輸入 4 筆學生資料，系統將依據學號排序存入鏈結串列。");
}

// 按照學號排序插入
void insert(StudentPtr* sPtr, int ID, const char name[], float score) {
    // 分配記憶體
    StudentPtr newPtr = (StudentPtr)malloc(sizeof(Student));

    if (newPtr == NULL) { // 確保記憶體分配
        printf("記憶體分配失敗，無法插入學生 %s。\n", name);
        return;
    }

    newPtr->ID = ID;
    strcpy(newPtr->name, name);
    newPtr->score = score;
    newPtr->nextPtr = NULL;

    if (*sPtr == NULL || ID < (*sPtr)->ID) {
        newPtr->nextPtr = *sPtr;
        *sPtr = newPtr;
        return;
    }

    StudentPtr previousPtr = NULL;
    StudentPtr currentPtr = *sPtr;

    
    while (currentPtr != NULL && ID > currentPtr->ID) {
        previousPtr = currentPtr;
        currentPtr = currentPtr->nextPtr;
    }

    // 插入到適當的位置
    previousPtr->nextPtr = newPtr;
    newPtr->nextPtr = currentPtr;
}


int isEmpty(StudentPtr sPtr) {
    return sPtr == NULL;
}


void printList(StudentPtr currentPtr) {
    if (isEmpty(currentPtr)) {
        puts("鏈結串列為空。\n");
    }
    else {
        puts("\n學生資料 (依學號排序)：");
        puts("學號\t姓名\t成績");

        // 逐一列印學生資訊
        while (currentPtr != NULL) {
            printf("%d\t%s\t%.2f\n", currentPtr->ID, currentPtr->name, currentPtr->score);
            currentPtr = currentPtr->nextPtr;
        }
        puts(""); // 換行
    }
}


void freeList(StudentPtr* sPtr) {
    StudentPtr currentPtr = *sPtr;
    StudentPtr tempPtr;

    while (currentPtr != NULL) {
        tempPtr = currentPtr;
        currentPtr = currentPtr->nextPtr;
        free(tempPtr);
    }

    *sPtr = NULL; 
}
