#include <iostream>
using namespace std;

class Matrix {
public:
    int row, column;
    int** element;

    Matrix(int m, int n) {
        row = m;
        column = n;
        element = new int* [m];
        for (int i = 0; i < m; i++)
            element[i] = new int[n];
    }

    Matrix(char name, int m, int n) {
        row = m;
        column = n;
        element = new int* [m];
        for (int i = 0; i < m; i++)
            element[i] = new int[n];

        cout << "輸入 " << m << "x" << n << " 矩陣 " << name << "：" << endl;
        for (int i = 0; i < m; i++)
            for (int j = 0; j < n; j++) {
                cout << name << "[" << i << "][" << j << "] = ";
                cin >> element[i][j];
            }
    }

    void print(const char* msg) {
        cout << "\n" << msg << "：" << endl;
        for (int i = 0; i < row; i++) {
            for (int j = 0; j < column; j++)
                cout << element[i][j] << '\t';
            cout << endl;
        }
    }

    // 遞乘 *=
    Matrix& operator*=(const Matrix& x) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < column; j++)
                element[i][j] *= x.element[i][j];
        return *this;
    }

    // 遞加 +=
    Matrix& operator+=(const Matrix& x) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < column; j++)
                element[i][j] += x.element[i][j];
        return *this;
    }

    // 遞減 -=
    Matrix& operator-=(const Matrix& x) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < column; j++)
                element[i][j] -= x.element[i][j];
        return *this;
    }

    // 複製內容（用來建立 a 的拷貝）
    void copyFrom(const Matrix& src) {
        for (int i = 0; i < row; i++)
            for (int j = 0; j < column; j++)
                element[i][j] = src.element[i][j];
    }

    ~Matrix() {
        for (int i = 0; i < row; i++)
            delete[] element[i];
        delete[] element;
    }
};

int main() {
    int row, column;
    cout << "輸入矩陣A與B的列數(row): ";
    cin >> row;
    cout << "輸入矩陣A與B的行數(column): ";
    cin >> column;

    Matrix a('A', row, column);
    Matrix b('B', row, column);

    // 建立 a 的三個拷貝
    Matrix mulA(row, column), addA(row, column), subA(row, column);
    mulA.copyFrom(a);
    addA.copyFrom(a);
    subA.copyFrom(a);

    // 執行三種運算
    mulA *= b;
    addA += b;
    subA -= b;

    // 輸出
    a.print("原始矩陣 A");
    b.print("原始矩陣 B");
    mulA.print("A *= B（遞乘）");
    addA.print("A += B（遞加）");
    subA.print("A -= B（遞減）");

    return 0;
}
